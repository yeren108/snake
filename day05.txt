抽象类
  抽象方法：只有方法名和参数列表，没有方法体。
    用于描述抽象的功能，多用于功能设计。定义软件之间的约定
    功能。
    
    Timer 类约定：在适合时候调用TimerTask的抽象方法run（）
    使用Timer只需要实现run方法就可以实现定时任务。
    Timer 定时的“回调”run方法实现定时任务
    
  一般把包含抽象方法的类定义为抽象类
  抽象类可以定义变量，不能直接实例化。
  抽象类只能被继承
  具体类继承抽象类时候必须“实现”(重写)全部抽象方法

接口
  接口相当于所有方法都是抽象方法，所有属性都是常量的抽象类
  接口中只能声明常量和抽象方法
  接口可以定义变量，可以引用实现类的实例
  接口不能直接实例化
  具体类实现接口必须实现全部的抽象方法。
  接口可以继承接口
  类可以实现多个接口，接口和实现类是父子类型关系
  
  具体类实现接口必须实现全部的抽象方法，就说明：接口约定了
  具体类的方法，约定了类的外部行为。
  
  接口可以实现软件组件之间的插接组装关系。
  
内部类
  定义在类内部的类
  用于在外部类中封装类的定义。
  内部类可以共享外部类的属性和方法。
 
  如：定时器任务的实现，经常采用内部类实现。

匿名内部类 也成为 匿名类
  语法非常简洁： new 类名(构造器参数){方法体}  
  匿名类容易与创建对象混淆。创建对象：new 类名(参数)
  匿名类是继承父类型并且同时实例化为子类对象，没有子类类名。
  匿名类可以继承类，继承抽象类，也可以实现接口。
  匿名类语法简洁，工作中非常常用。
  书写时要要注意括号配对情况。
贪吃蛇

  实现舞台的构造器
   1) 添加舞台构造器 WormStage()
   2) 在舞台上添加生成食物的算法 createFood() 
   3) 在蛇添加判断包含的算法：contains(x,y)
   4) 在TestCase中添加测试案例，测试WormStage构造器
   5) 在TestCase中添加测试案例，测试worm.contains()方法
  
贪吃蛇
  Cell 是数据格式，是数据结构
  Worm 是核心数据和算法的封装，包括爬行，碰撞，吃食物等
  TestCase 是核心业务数据的测试案例，必须严格实现通过
  WormStage 1 是蛇的绘制面板，还充当了软件业务流程控制器的
    作用：控制定时任务处理，和键盘输入流程控制creepTo！
    
  JFrame 只是窗口容器。将WormStage 显示出来。
  
  
 
 
 
 
 
 
 
 
 
 






